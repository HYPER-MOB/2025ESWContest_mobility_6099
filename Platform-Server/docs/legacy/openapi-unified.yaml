openapi: 3.0.3
info:
  title: HYPERMOB Unified Platform API
  description: |
    HYPERMOB 통합 플랫폼 API (MFA Authentication + AI Services)

    ## 주요 기능
    1. **MFA 인증 시스템** - 얼굴/BLE/NFC 다중 인증
    2. **AI 기반 신체 측정** - MediaPipe를 활용한 신체 치수 측정
    3. **차량 설정 추천** - 머신러닝 기반 최적 차량 설정 추천
    4. **얼굴 랜드마크 추출** - 얼굴 인증을 위한 랜드마크 데이터 추출
    5. **차량 예약 및 관리** - 차량 예약, 조회, 취소
    6. **사용자 프로필 관리** - 신체 정보 및 차량 설정 프로필

    ## 배포 환경
    - AWS API Gateway + Lambda
    - MySQL Database (RDS)
    - S3 (이미지 및 데이터 저장)
  version: 2.0.0
  contact:
    name: HYPERMOB Development Team
    email: dev@hypermob.com

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    description: AWS API Gateway
    variables:
      apiId:
        default: your-api-id
        description: API Gateway ID
      region:
        default: us-east-1
        description: AWS Region
      stage:
        default: v1
        description: API Stage

tags:
  - name: Health Check
    description: 서버 상태 확인 API
  - name: User Management
    description: 사용자 등록 및 관리 API
  - name: Face Authentication
    description: 얼굴 인증 관련 API
  - name: BLE Authentication
    description: BLE 인증 관련 API
  - name: NFC Authentication
    description: NFC 인증 관련 API
  - name: Session Management
    description: 인증 세션 관리 API
  - name: AI - Face Analysis
    description: 얼굴 랜드마크 추출 및 분석 API
  - name: AI - Measurement
    description: 신체 측정 관련 API
  - name: AI - Recommendation
    description: 차량 설정 추천 관련 API
  - name: Vehicle Management
    description: 차량 목록 조회 및 관리 API
  - name: Booking Management
    description: 차량 예약 생성 및 관리 API
  - name: User Profile
    description: 사용자 프로필 조회 및 관리 API
  - name: Vehicle Control
    description: 차량 설정값 적용 및 제어 API

paths:
  /health:
    get:
      summary: 서버 헬스 체크
      description: API 서버와 데이터베이스 연결 상태를 확인합니다.
      tags:
        - Health Check
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-health/invocations
      responses:
        '200':
          description: 서버 정상 동작
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: 서버 또는 DB 연결 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      summary: 사용자 등록
      description: |
        새로운 사용자를 등록합니다.
        - 16자 user_id 자동 생성
        - 기본 정보(이름, 이메일, 전화번호) 등록
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 홍길동
                email:
                  type: string
                  format: email
                  example: hong@example.com
                phone:
                  type: string
                  example: 010-1234-5678
                address:
                  type: string
                  example: 서울시 강남구
              required:
                - name
                - email
                - phone
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-users/invocations
      responses:
        '201':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: U000000000000001
                  status:
                    type: string
                    example: created

  /facedata:
    post:
      summary: 얼굴 랜드마크 추출 API
      description: |
        얼굴 이미지를 업로드하여 MediaPipe FaceMesh로 468개 얼굴 랜드마크 좌표를 추출합니다.
      tags:
        - AI - Face Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image_url
              properties:
                image_url:
                  type: string
                  format: uri
                  description: S3에 업로드된 얼굴 이미지 URL
                user_id:
                  type: string
                  description: 사용자 고유 ID
                refine:
                  type: boolean
                  default: false
                indices:
                  type: string
                  description: 추출할 랜드마크 인덱스
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-facedata/invocations
      responses:
        '200':
          description: 추출 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      landmarks:
                        type: object
                      landmark_count:
                        type: integer
                      output_file_url:
                        type: string
                        format: uri

  /measure:
    post:
      summary: 신체 측정 API
      description: |
        전신 이미지를 업로드하여 사용자의 신체 치수를 측정합니다.
      tags:
        - AI - Measurement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image_url
                - height_cm
              properties:
                image_url:
                  type: string
                  format: uri
                  description: S3에 업로드된 전신 이미지 URL
                height_cm:
                  type: number
                  format: float
                  description: 사용자의 실제 신장 (cm)
                  minimum: 100
                  maximum: 250
                user_id:
                  type: string
                  description: 사용자 고유 ID
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-measure/invocations
      responses:
        '200':
          description: 측정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      arm_cm:
                        type: number
                        format: float
                      leg_cm:
                        type: number
                        format: float
                      torso_cm:
                        type: number
                        format: float
                      output_image_url:
                        type: string
                        format: uri

  /recommend:
    post:
      summary: 차량 설정 추천 API
      description: |
        사용자의 신체 치수를 기반으로 최적의 차량 설정값을 추천합니다.
      tags:
        - AI - Recommendation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - height
                - upper_arm
                - forearm
                - thigh
                - calf
                - torso
              properties:
                height:
                  type: number
                  format: float
                upper_arm:
                  type: number
                  format: float
                forearm:
                  type: number
                  format: float
                thigh:
                  type: number
                  format: float
                calf:
                  type: number
                  format: float
                torso:
                  type: number
                  format: float
                user_id:
                  type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-recommend/invocations
      responses:
        '200':
          description: 추천 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/VehicleSettings'

  /auth/face:
    post:
      summary: 얼굴 이미지 등록
      description: |
        사용자의 얼굴 이미지를 업로드하여 face_id를 발급받습니다.
      tags:
        - Face Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-face/invocations
      responses:
        '200':
          description: 얼굴 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  face_id:
                    type: string
                  status:
                    type: string

  /auth/nfc:
    post:
      summary: NFC UID 등록
      description: 사용자의 NFC 태그 UID를 등록합니다.
      tags:
        - NFC Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                nfc_uid:
                  type: string
                  pattern: '^[0-9A-Fa-f]{14}$'
              required:
                - user_id
                - nfc_uid
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-nfc/invocations
      responses:
        '200':
          description: NFC UID 등록 성공
    get:
      summary: NFC UID 조회
      tags:
        - NFC Authentication
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-nfc-get/invocations
      responses:
        '200':
          description: NFC UID 조회 성공

  /auth/ble:
    get:
      summary: BLE 해시키 요청
      tags:
        - BLE Authentication
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
        - name: car_id
          in: query
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-ble/invocations
      responses:
        '200':
          description: BLE 해시키 발급 성공

  /auth/session:
    get:
      summary: 차량 인증 세션 시작
      tags:
        - Session Management
      parameters:
        - name: car_id
          in: query
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-session/invocations
      responses:
        '200':
          description: 세션 생성 성공

  /auth/result:
    post:
      summary: 차량 인증 결과 보고
      tags:
        - Session Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                car_id:
                  type: string
                face_verified:
                  type: boolean
                ble_verified:
                  type: boolean
                nfc_verified:
                  type: boolean
              required:
                - session_id
                - car_id
                - face_verified
                - ble_verified
                - nfc_verified
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-result/invocations
      responses:
        '200':
          description: 인증 결과 처리 성공

  /auth/nfc/verify:
    post:
      summary: NFC 최종 인증 검증
      tags:
        - NFC Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                nfc_uid:
                  type: string
                car_id:
                  type: string
              required:
                - user_id
                - nfc_uid
                - car_id
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-auth-nfc-verify/invocations
      responses:
        '200':
          description: NFC 인증 검증 성공

  /vehicles:
    get:
      summary: 차량 목록 조회
      tags:
        - Vehicle Management
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [available, rented, maintenance]
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-vehicles/invocations
      responses:
        '200':
          description: 차량 목록 조회 성공

  /bookings:
    post:
      summary: 차량 예약 생성
      tags:
        - Booking Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-bookings/invocations
      responses:
        '201':
          description: 예약 생성 성공
    get:
      summary: 예약 목록 조회
      tags:
        - Booking Management
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-bookings/invocations
      responses:
        '200':
          description: 예약 목록 조회 성공

  /users/{user_id}/profile:
    get:
      summary: 사용자 프로필 조회
      tags:
        - User Profile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-user-profile/invocations
      responses:
        '200':
          description: 프로필 조회 성공

  /vehicles/{car_id}/settings/apply:
    post:
      summary: 차량 설정 자동 적용
      tags:
        - Vehicle Control
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                settings:
                  $ref: '#/components/schemas/VehicleSettings'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-vehicle-control/invocations
      responses:
        '200':
          description: 설정 적용 성공

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    BookingRequest:
      type: object
      properties:
        user_id:
          type: string
        car_id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
      required:
        - user_id
        - car_id
        - start_time
        - end_time

    VehicleSettings:
      type: object
      properties:
        seat_position:
          type: integer
        seat_angle:
          type: integer
        seat_front_height:
          type: integer
        seat_rear_height:
          type: integer
        mirror_left_yaw:
          type: integer
        mirror_left_pitch:
          type: integer
        mirror_right_yaw:
          type: integer
        mirror_right_pitch:
          type: integer
        mirror_room_yaw:
          type: integer
        mirror_room_pitch:
          type: integer
        wheel_position:
          type: integer
        wheel_angle:
          type: integer

x-amazon-apigateway-binary-media-types:
  - multipart/form-data
  - image/jpeg
  - image/png
  - application/octet-stream
