openapi: 3.0.3
info:
  title: HYPERMOB MFA Authentication API
  description: |
    통합 MFA 인증 시스템 API (얼굴 → BLE → NFC)

    ## 인증 플로우
    1. **[App]** 얼굴 등록 (`POST /auth/face`)
    2. **[App]** NFC UID 등록 (`POST /auth/nfc`)
    3. **[Car]** 인증 세션 요청 (`GET /auth/session`)
    4. **[Car]** 얼굴/BLE/NFC 인증 수행
    5. **[Car]** 인증 결과 보고 (`POST /auth/result`)
    6. **[App]** BLE 해시키 요청 (`GET /auth/ble`)
    7. **[App]** NFC 최종 검증 (`POST /auth/nfc/verify`)

    ## 배포 환경
    - AWS API Gateway + Lambda
    - MySQL Database (RDS)
  version: 1.0.0
  contact:
    name: HYPERMOB Development Team
    email: dev@hypermob.com

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    description: AWS API Gateway
    variables:
      apiId:
        default: your-api-id
        description: API Gateway ID
      region:
        default: us-east-1
        description: AWS Region
      stage:
        default: v1
        description: API Stage

tags:
  - name: Face Authentication
    description: 얼굴 인증 관련 API
  - name: BLE Authentication
    description: BLE 인증 관련 API
  - name: NFC Authentication
    description: NFC 인증 관련 API
  - name: Session Management
    description: 인증 세션 관리 API
  - name: Health Check
    description: 서버 상태 확인 API
  - name: Vehicle Management
    description: 차량 목록 조회 및 관리 API
  - name: Booking Management
    description: 차량 예약 생성 및 관리 API
  - name: User Profile
    description: 사용자 프로필 조회 및 관리 API
  - name: Vehicle Control
    description: 차량 설정값 적용 및 제어 API

paths:
  /health:
    get:
      summary: 서버 헬스 체크
      description: API 서버와 데이터베이스 연결 상태를 확인합니다.
      tags:
        - Health Check
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-mfa-health/invocations
        passthroughBehavior: when_no_match
      responses:
        '200':
          description: 서버 정상 동작
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-23T12:34:56Z"
                  database:
                    type: string
                    enum: [connected, disconnected]
                    example: connected
        '503':
          description: 서버 또는 DB 연결 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/face:
    post:
      summary: 얼굴 이미지 등록
      description: |
        사용자의 얼굴 이미지를 업로드하여 face_id를 발급받습니다.
        - 이미지는 JPEG 형식, 최대 1MB
        - SHA256 해시를 사용하여 face_id 생성 (16자 hex)
        - user_id는 UUID로 자동 생성
      tags:
        - Face Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 얼굴 이미지 (JPEG, 최대 1MB)
              required:
                - image
      responses:
        '200':
          description: 얼굴 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "U12345ABCDEF"
                    description: 생성된 사용자 ID (16자)
                  face_id:
                    type: string
                    example: "F1A2B3C4D5E6F708"
                    description: 얼굴 해시 ID (16자 hex)
                  status:
                    type: string
                    example: ok
                required:
                  - user_id
                  - face_id
                  - status
        '400':
          description: 잘못된 요청 (이미지 형식 오류, 크기 초과 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_image:
                  summary: 이미지 형식 오류
                  value:
                    error: invalid_image
                    message: "이미지를 읽을 수 없습니다"
                file_too_large:
                  summary: 파일 크기 초과
                  value:
                    error: file_too_large
                    message: "이미지 크기는 1MB를 초과할 수 없습니다"
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/nfc:
    post:
      summary: NFC UID 등록
      description: |
        사용자의 NFC 태그 UID를 등록합니다.
        - UID는 ISO14443A 표준 (7바이트, 14자 hex)
        - user_id는 얼굴 등록 시 발급받은 ID 사용
      tags:
        - NFC Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "U12345ABCDEF"
                  description: 사용자 ID (얼굴 등록 시 발급)
                nfc_uid:
                  type: string
                  pattern: '^[0-9A-Fa-f]{14}$'
                  example: "04A1B2C3D4E5F6"
                  description: NFC UID (14자 hex)
              required:
                - user_id
                - nfc_uid
      responses:
        '200':
          description: NFC UID 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_nfc_uid:
                  summary: NFC UID 형식 오류
                  value:
                    error: invalid_nfc_uid
                    message: "NFC UID는 14자 hex 문자열이어야 합니다"
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: user_not_found
                message: "해당 user_id를 찾을 수 없습니다"
        '409':
          description: 이미 등록된 NFC UID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: nfc_uid_already_exists
                message: "해당 NFC UID는 이미 등록되어 있습니다"
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: NFC UID 조회
      description: |
        사용자의 등록된 NFC UID를 조회합니다.
        - user_id로 서버에 저장된 nfc_uid를 조회
        - 앱이 NFC HCE에 사용할 UID를 가져옴
      tags:
        - NFC Authentication
      parameters:
        - name: user_id
          in: query
          required: true
          description: 사용자 ID
          schema:
            type: string
            example: "U12345ABCDEF"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:hypermob-mfa-auth-nfc-get/invocations
        passthroughBehavior: when_no_match
      responses:
        '200':
          description: NFC UID 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "U12345ABCDEF"
                  nfc_uid:
                    type: string
                    example: "04A1B2C3D4E5F6"
                    description: 등록된 NFC UID (14자 hex)
                  status:
                    type: string
                    example: ok
        '400':
          description: 잘못된 요청 (user_id 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /body/upload:
    post:
      summary: 전신 사진 업로드
      description: |
        사용자의 전신 사진을 업로드하여 S3 URL을 발급받습니다.
        - 이미지는 JPEG 형식, 최대 5MB
        - S3에 저장 후 URL 반환
        - /measure 엔드포인트에서 사용
      tags:
        - Body Measurement
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 전신 이미지 (JPEG, 최대 5MB)
                user_id:
                  type: string
                  description: 사용자 ID (선택사항)
              required:
                - image
      responses:
        '200':
          description: 전신 사진 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "U12345ABCDEF"
                    description: 사용자 ID
                  body_image_url:
                    type: string
                    example: "https://hypermob-images.s3.ap-northeast-2.amazonaws.com/body/U12345ABCDEF_1234567890.jpg"
                    description: S3에 업로드된 전신 사진 URL
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00.000Z"
                required:
                  - body_image_url
                  - status
        '400':
          description: 잘못된 요청 (이미지 형식 오류, 크기 초과 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/ble:
    get:
      summary: BLE 해시키 요청
      description: |
        BLE 인증에 사용할 8바이트 해시키를 발급받습니다.
        - SHA256(user_id + car_id + nonce)의 상위 8바이트 사용
        - 유효기간: 10분
        - App이 BLE 스캔 전에 호출
      tags:
        - BLE Authentication
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            example: "U12345ABCDEF"
          description: 사용자 ID
        - name: car_id
          in: query
          required: false
          schema:
            type: string
            default: "CAR123"
            example: "CAR123"
          description: 차량 ID (선택, 기본값 CAR123)
      responses:
        '200':
          description: BLE 해시키 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  hashkey:
                    type: string
                    pattern: '^[0-9A-Fa-f]{16}$'
                    example: "A1B2C3D4E5F60708"
                    description: BLE 해시키 (16자 hex, 8바이트)
                  expires_at:
                    type: string
                    format: date-time
                    example: "2025-10-23T12:44:56Z"
                    description: 만료 시간 (발급 시점 + 10분)
                required:
                  - hashkey
                  - expires_at
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/session:
    get:
      summary: 차량 인증 세션 시작
      description: |
        차량이 인증에 필요한 전체 데이터를 요청합니다.
        - face_id: 얼굴 인증용
        - hashkey: BLE 인증용 (없으면 자동 생성)
        - nfc_uid: NFC 인증용
        - session_id: 인증 결과 보고 시 사용
      tags:
        - Session Management
      parameters:
        - name: car_id
          in: query
          required: true
          schema:
            type: string
            example: "CAR123"
          description: 차량 ID
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            example: "U12345ABCDEF"
          description: 사용자 ID
      responses:
        '200':
          description: 세션 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    example: "SESSION_ABC123DEF456"
                    description: 세션 ID (인증 결과 보고 시 사용)
                  face_id:
                    type: string
                    example: "F1A2B3C4D5E6F708"
                    description: 얼굴 해시 ID
                  hashkey:
                    type: string
                    example: "A1B2C3D4E5F60708"
                    description: BLE 해시키
                  nfc_uid:
                    type: string
                    example: "04A1B2C3D4E5F6"
                    description: NFC UID
                  status:
                    type: string
                    example: active
                    description: 세션 상태
                required:
                  - session_id
                  - face_id
                  - hashkey
                  - nfc_uid
                  - status
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: user_not_found
                message: "해당 user_id를 찾을 수 없습니다"
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/result:
    post:
      summary: 차량 인증 결과 보고
      description: |
        차량이 각 인증 단계(얼굴/BLE/NFC) 결과를 서버에 보고합니다.
        - 3개 모두 true → MFA_SUCCESS
        - 하나라도 false → MFA_FAILED
      tags:
        - Session Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  example: "SESSION_ABC123DEF456"
                  description: 세션 ID (GET /auth/session에서 발급)
                car_id:
                  type: string
                  example: "CAR123"
                  description: 차량 ID
                face_verified:
                  type: boolean
                  example: true
                  description: 얼굴 인증 성공 여부
                ble_verified:
                  type: boolean
                  example: true
                  description: BLE 인증 성공 여부
                nfc_verified:
                  type: boolean
                  example: true
                  description: NFC 인증 성공 여부
              required:
                - session_id
                - car_id
                - face_verified
                - ble_verified
                - nfc_verified
      responses:
        '200':
          description: 인증 결과 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [MFA_SUCCESS, MFA_FAILED]
                    example: MFA_SUCCESS
                  message:
                    type: string
                    example: "모든 인증 단계 완료"
                  failed_steps:
                    type: array
                    items:
                      type: string
                      enum: [face, ble, nfc]
                    description: 실패한 인증 단계 목록 (MFA_FAILED일 때만)
                  session_id:
                    type: string
                    example: "SESSION_ABC123DEF456"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-23T12:34:56Z"
                required:
                  - status
                  - message
                  - session_id
                  - timestamp
              examples:
                success:
                  summary: 모든 인증 성공
                  value:
                    status: MFA_SUCCESS
                    message: "모든 인증 단계 완료"
                    session_id: "SESSION_ABC123DEF456"
                    timestamp: "2025-10-23T12:34:56Z"
                failed:
                  summary: 일부 인증 실패
                  value:
                    status: MFA_FAILED
                    message: "일부 인증 실패"
                    failed_steps:
                      - face
                      - nfc
                    session_id: "SESSION_ABC123DEF456"
                    timestamp: "2025-10-23T12:34:56Z"
        '404':
          description: 세션을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: session_not_found
                message: "해당 session_id를 찾을 수 없습니다"
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/nfc/verify:
    post:
      summary: NFC 최종 인증 검증 (App용)
      description: |
        App이 NFC 태그 인증 후 최종 검증을 요청합니다.
        - user_id, car_id로 auth_sessions 조회
        - nfc_uid 일치 확인
        - face_verified, ble_verified가 모두 true인지 확인
        - 모두 통과 시 nfc_verified = true, status = MFA_SUCCESS
      tags:
        - NFC Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "U12345ABCDEF"
                  description: 사용자 ID
                nfc_uid:
                  type: string
                  pattern: '^[0-9A-Fa-f]{14}$'
                  example: "04A1B2C3D4E5F6"
                  description: NFC UID
                car_id:
                  type: string
                  example: "CAR123"
                  description: 차량 ID
              required:
                - user_id
                - nfc_uid
                - car_id
      responses:
        '200':
          description: NFC 인증 검증 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [MFA_SUCCESS, MFA_FAILED]
                    example: MFA_SUCCESS
                  message:
                    type: string
                    example: "모든 인증 단계 완료"
                  session_id:
                    type: string
                    example: "SESSION_ABC123DEF456"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-23T12:34:56Z"
        '400':
          description: 잘못된 요청 또는 이전 단계 미완료
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                nfc_mismatch:
                  summary: NFC UID 불일치
                  value:
                    error: nfc_uid_mismatch
                    message: "NFC UID가 일치하지 않습니다"
                previous_steps_incomplete:
                  summary: 이전 단계 미완료
                  value:
                    error: previous_steps_incomplete
                    message: "얼굴 또는 BLE 인증이 완료되지 않았습니다"
                    completed_steps:
                      - face
        '404':
          description: 세션을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: session_not_found
                message: "해당 user_id와 car_id에 대한 활성 세션을 찾을 수 없습니다"
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles:
    get:
      summary: 차량 목록 조회
      description: 사용 가능한 차량 목록을 조회합니다.
      tags:
        - Vehicle Management
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [available, in_use, maintenance]
            default: available
          description: 차량 상태 필터
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: 위치 필터 (부분 일치)
      responses:
        '200':
          description: 차량 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      vehicles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Vehicle'
                      count:
                        type: integer
                        example: 3

  /vehicles/{car_id}:
    get:
      summary: 특정 차량 조회
      description: 차량 ID로 특정 차량의 상세 정보를 조회합니다.
      tags:
        - Vehicle Management
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
          description: 차량 ID
      responses:
        '200':
          description: 차량 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Vehicle'
        '404':
          description: 차량을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings:
    post:
      summary: 차량 예약 생성
      description: 새로운 차량 예약을 생성합니다.
      tags:
        - Booking Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '201':
          description: 예약 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 차량을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 예약 충돌
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: 예약 목록 조회
      description: 사용자별 예약 목록을 조회합니다.
      tags:
        - Booking Management
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 예약 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                      count:
                        type: integer

  /bookings/{booking_id}:
    get:
      summary: 예약 조회
      description: 특정 예약의 상세 정보를 조회합니다.
      tags:
        - Booking Management
      parameters:
        - name: booking_id
          in: path
          required: true
          schema:
            type: string
          description: 예약 ID
      responses:
        '200':
          description: 예약 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Booking'
        '404':
          description: 예약을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: 예약 취소
      description: 예약을 취소합니다.
      tags:
        - Booking Management
      parameters:
        - name: booking_id
          in: path
          required: true
          schema:
            type: string
          description: 예약 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [cancelled]
              required:
                - status
      responses:
        '200':
          description: 예약 취소 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      booking_id:
                        type: string
                      status:
                        type: string
                      updated_at:
                        type: string
                        format: date-time

  /users/{user_id}/profile:
    get:
      summary: 사용자 프로필 조회
      description: 사용자의 신체 측정 데이터 및 차량 설정 프로필을 조회합니다.
      tags:
        - User Profile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/UserProfile'
    put:
      summary: 사용자 프로필 생성/업데이트
      description: 사용자 프로필을 생성하거나 업데이트합니다.
      tags:
        - User Profile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: 사용자 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body_measurements:
                  $ref: '#/components/schemas/BodyMeasurements'
                vehicle_settings:
                  $ref: '#/components/schemas/VehicleSettings'
              required:
                - body_measurements
                - vehicle_settings
      responses:
        '200':
          description: 프로필 업데이트 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '201':
          description: 프로필 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 사용자 프로필 삭제
      description: 사용자 프로필을 삭제합니다.
      tags:
        - User Profile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 프로필 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 프로필이 삭제되었습니다

  /vehicles/{car_id}/settings/apply:
    post:
      summary: 차량 설정 자동 적용
      description: 사용자 프로필을 차량에 자동으로 적용합니다.
      tags:
        - Vehicle Control
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
          description: 차량 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: U12345ABCDEF
                settings:
                  $ref: '#/components/schemas/VehicleSettings'
              required:
                - user_id
                - settings
      responses:
        '200':
          description: 설정 적용 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      car_id:
                        type: string
                      applied_settings:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            status:
                              type: string
                              enum: [applied, failed]
                            value:
                              type: number
                            timestamp:
                              type: string
                              format: date-time
                      timestamp:
                        type: string
                        format: date-time
        '404':
          description: 차량을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles/{car_id}/settings/manual:
    post:
      summary: 수동 조작 기록
      description: 사용자의 수동 조작을 기록합니다.
      tags:
        - Vehicle Control
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
          description: 차량 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                settings:
                  type: object
                  additionalProperties:
                    type: number
              required:
                - user_id
                - settings
      responses:
        '200':
          description: 수동 조작 기록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 수동 조작이 기록되었습니다

  /vehicles/{car_id}/settings/current:
    get:
      summary: 현재 차량 설정값 조회
      description: 차량의 현재 설정값을 조회합니다.
      tags:
        - Vehicle Control
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
          description: 차량 ID
      responses:
        '200':
          description: 현재 설정값 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      car_id:
                        type: string
                      user_id:
                        type: string
                      settings:
                        $ref: '#/components/schemas/VehicleSettings'
                      adjustment_type:
                        type: string
                        enum: [auto, manual]
                      timestamp:
                        type: string
                        format: date-time
        '404':
          description: 설정 기록이 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles/{car_id}/settings/history:
    get:
      summary: 차량 설정 히스토리 조회
      description: 차량의 설정 변경 히스토리를 조회합니다.
      tags:
        - Vehicle Control
      parameters:
        - name: car_id
          in: path
          required: true
          schema:
            type: string
          description: 차량 ID
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: 사용자 ID 필터
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: 결과 개수 제한
      responses:
        '200':
          description: 히스토리 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      car_id:
                        type: string
                      history:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            user_id:
                              type: string
                            car_id:
                              type: string
                            settings:
                              type: object
                            adjustment_type:
                              type: string
                              enum: [auto, manual]
                            timestamp:
                              type: string
                              format: date-time
                      count:
                        type: integer

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: 에러 코드
          example: invalid_request
        message:
          type: string
          description: 에러 메시지 (사람이 읽을 수 있는 형식)
          example: "잘못된 요청입니다"
        details:
          type: object
          description: 추가 에러 상세 정보 (선택)
          additionalProperties: true
      required:
        - error
        - message

    MFASuccess:
      type: object
      properties:
        status:
          type: string
          enum: [MFA_SUCCESS]
          example: MFA_SUCCESS
        message:
          type: string
          example: "모든 인증 단계 완료"
        session_id:
          type: string
          example: "SESSION_ABC123DEF456"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-23T12:34:56Z"
      required:
        - status
        - message
        - session_id
        - timestamp

    MFAFailed:
      type: object
      properties:
        status:
          type: string
          enum: [MFA_FAILED]
          example: MFA_FAILED
        message:
          type: string
          example: "일부 인증 실패"
        failed_steps:
          type: array
          items:
            type: string
            enum: [face, ble, nfc]
          example: ["face", "nfc"]
          description: 실패한 인증 단계 목록
        session_id:
          type: string
          example: "SESSION_ABC123DEF456"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-23T12:34:56Z"
      required:
        - status
        - message
        - failed_steps
        - session_id
        - timestamp

    Vehicle:
      type: object
      properties:
        car_id:
          type: string
          example: CAR001
        model:
          type: string
          example: Genesis GV80
        status:
          type: string
          enum: [available, in_use, maintenance]
          example: available
        location:
          type: string
          example: Seoul Gangnam Station
        features:
          type: array
          items:
            type: string
          example: ["autonomous_driving", "adaptive_seat"]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BookingRequest:
      type: object
      properties:
        user_id:
          type: string
          example: U12345ABCDEF
        car_id:
          type: string
          example: CAR001
        start_time:
          type: string
          format: date-time
          example: "2025-10-27T14:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2025-10-27T18:00:00Z"
      required:
        - user_id
        - car_id
        - start_time
        - end_time

    Booking:
      type: object
      properties:
        booking_id:
          type: string
          example: BK1730000000001
        user_id:
          type: string
          example: U12345ABCDEF
        car_id:
          type: string
          example: CAR001
        status:
          type: string
          enum: [pending, confirmed, active, completed, cancelled]
          example: confirmed
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BodyMeasurements:
      type: object
      properties:
        height:
          type: number
          format: float
          example: 175.0
        upper_arm:
          type: number
          format: float
          example: 31.0
        forearm:
          type: number
          format: float
          example: 26.0
        thigh:
          type: number
          format: float
          example: 51.0
        calf:
          type: number
          format: float
          example: 36.0
        torso:
          type: number
          format: float
          example: 61.0
      required:
        - height
        - upper_arm
        - forearm
        - thigh
        - calf
        - torso

    VehicleSettings:
      type: object
      properties:
        seat_position:
          type: number
          format: float
          example: 45
        seat_angle:
          type: number
          format: float
          example: 15
        seat_front_height:
          type: number
          format: float
          example: 40
        seat_rear_height:
          type: number
          format: float
          example: 42
        mirror_left_yaw:
          type: number
          format: float
          example: 150
        mirror_left_pitch:
          type: number
          format: float
          example: 10
        mirror_right_yaw:
          type: number
          format: float
          example: 210
        mirror_right_pitch:
          type: number
          format: float
          example: 12
        mirror_room_yaw:
          type: number
          format: float
          example: 180
        mirror_room_pitch:
          type: number
          format: float
          example: 8
        wheel_position:
          type: number
          format: float
          example: 90
        wheel_angle:
          type: number
          format: float
          example: 20
      required:
        - seat_position
        - seat_angle
        - seat_front_height
        - seat_rear_height
        - mirror_left_yaw
        - mirror_left_pitch
        - mirror_right_yaw
        - mirror_right_pitch
        - mirror_room_yaw
        - mirror_room_pitch
        - wheel_position
        - wheel_angle

    UserProfile:
      type: object
      properties:
        user_id:
          type: string
          example: U12345ABCDEF
        body_measurements:
          $ref: '#/components/schemas/BodyMeasurements'
        vehicle_settings:
          $ref: '#/components/schemas/VehicleSettings'
        has_profile:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  # securitySchemes:
  #   ApiKeyAuth:
  #     type: apiKey
  #     in: header
  #     name: X-API-Key
  #     description: |
  #       API 키 기반 인증 (향후 구현 예정)
  #       현재 MVP에서는 사용하지 않음

# 현재 MVP에서는 보안 적용 안 함 (추후 JWT/OAuth 추가 예정)
# security:
#   - ApiKeyAuth: []

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true

x-amazon-apigateway-binary-media-types:
  - multipart/form-data
  - image/jpeg
  - image/png
  - application/octet-stream

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
