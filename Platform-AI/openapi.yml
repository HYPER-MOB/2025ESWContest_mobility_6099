openapi: 3.0.3
info:
  title: HYPERMOB Platform AI API
  description: |
    신체 측정 및 차량 설정 추천을 위한 AI 서비스 API
    - 사용자의 전신 이미지를 분석하여 신체 치수 측정
    - 측정된 데이터를 기반으로 최적의 차량 설정값 추천
  version: 1.0.0
  contact:
    name: HYPERMOB Platform Team

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    description: AWS API Gateway Endpoint
    variables:
      apiId:
        default: your-api-id
        description: API Gateway ID
      region:
        default: ap-northeast-2
        description: AWS Region
      stage:
        default: prod
        description: API Stage (dev, staging, prod)

paths:
  /measure:
    post:
      summary: 신체 측정 API
      description: |
        전신 이미지를 업로드하여 사용자의 신체 치수를 측정합니다.
        - MediaPipe를 활용한 포즈 랜드마크 분석
        - 팔, 다리, 몸통 길이 측정
        - 측정 결과 오버레이 이미지 생성
      operationId: measureBody
      tags:
        - Measurement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image_url
                - height_cm
              properties:
                image_url:
                  type: string
                  format: uri
                  description: S3에 업로드된 전신 이미지 URL
                  example: "s3://hypermob-images/users/user123/full_body.jpg"
                height_cm:
                  type: number
                  format: float
                  description: 사용자의 실제 신장 (cm)
                  minimum: 100
                  maximum: 250
                  example: 168.0
                user_id:
                  type: string
                  description: 사용자 고유 ID
                  example: "user123"
            examples:
              basic:
                summary: 기본 측정 요청
                value:
                  image_url: "s3://hypermob-images/users/user123/full_body.jpg"
                  height_cm: 175.0
                  user_id: "user123"
      responses:
        '200':
          description: 측정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      scale_cm_per_px:
                        type: number
                        format: float
                        description: 픽셀당 cm 비율
                        example: 0.2145
                      arm_cm:
                        type: number
                        format: float
                        description: 팔 전체 길이 (cm)
                        nullable: true
                        example: 65.3
                      leg_cm:
                        type: number
                        format: float
                        description: 다리 전체 길이 (cm)
                        nullable: true
                        example: 92.1
                      torso_cm:
                        type: number
                        format: float
                        description: 몸통 길이 (cm)
                        nullable: true
                        example: 61.5
                      output_image_url:
                        type: string
                        format: uri
                        description: 측정 결과 오버레이 이미지 S3 URL
                        example: "s3://hypermob-images/results/user123/measurement_overlay.jpg"
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_image:
                  summary: 이미지를 찾을 수 없음
                  value:
                    status: "error"
                    error:
                      code: "INVALID_IMAGE"
                      message: "Unable to find image at specified URL"
                no_pose:
                  summary: 포즈 감지 실패
                  value:
                    status: "error"
                    error:
                      code: "POSE_DETECTION_FAILED"
                      message: "Unable to find pose landmarks. Please try a clearer full-body image."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:471464546082:function:hypermob-measure/invocations
        passthroughBehavior: when_no_match

  /recommend:
    post:
      summary: 차량 설정 추천 API
      description: |
        사용자의 신체 치수를 기반으로 최적의 차량 설정값을 추천합니다.
        - Ridge 회귀 모델 기반 예측
        - 시트 위치/각도, 미러 각도, 스티어링 휠 설정 등 12개 파라미터 추천
      operationId: recommendCarSettings
      tags:
        - Recommendation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - height
                - upper_arm
                - forearm
                - thigh
                - calf
                - torso
              properties:
                height:
                  type: number
                  format: float
                  description: 키 (cm)
                  example: 175.0
                upper_arm:
                  type: number
                  format: float
                  description: 상완 길이 (cm)
                  example: 31.0
                forearm:
                  type: number
                  format: float
                  description: 전완 길이 (cm)
                  example: 26.0
                thigh:
                  type: number
                  format: float
                  description: 허벅지 길이 (cm)
                  example: 51.0
                calf:
                  type: number
                  format: float
                  description: 종아리 길이 (cm)
                  example: 36.0
                torso:
                  type: number
                  format: float
                  description: 몸통 길이 (cm)
                  example: 61.0
                user_id:
                  type: string
                  description: 사용자 고유 ID
                  example: "user123"
            examples:
              standard:
                summary: 표준 체형
                value:
                  height: 175.0
                  upper_arm: 31.0
                  forearm: 26.0
                  thigh: 51.0
                  calf: 36.0
                  torso: 61.0
                  user_id: "user123"
      responses:
        '200':
          description: 추천 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      seat_position:
                        type: integer
                        description: 시트 위치 (0-100%)
                        minimum: 0
                        maximum: 100
                        example: 45
                      seat_angle:
                        type: integer
                        description: 시트 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 15
                      seat_front_height:
                        type: integer
                        description: 시트 전면 높이 (0-100%)
                        minimum: 0
                        maximum: 100
                        example: 40
                      seat_rear_height:
                        type: integer
                        description: 시트 후면 높이 (0-100%)
                        minimum: 0
                        maximum: 100
                        example: 42
                      mirror_left_yaw:
                        type: integer
                        description: 좌측 미러 좌우 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 150
                      mirror_left_pitch:
                        type: integer
                        description: 좌측 미러 상하 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 10
                      mirror_right_yaw:
                        type: integer
                        description: 우측 미러 좌우 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 210
                      mirror_right_pitch:
                        type: integer
                        description: 우측 미러 상하 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 12
                      mirror_room_yaw:
                        type: integer
                        description: 룸미러 좌우 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 180
                      mirror_room_pitch:
                        type: integer
                        description: 룸미러 상하 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 8
                      wheel_position:
                        type: integer
                        description: 스티어링 휠 위치 (0-100%)
                        minimum: 0
                        maximum: 100
                        example: 90
                      wheel_angle:
                        type: integer
                        description: 스티어링 휠 각도 (0-180도)
                        minimum: 0
                        maximum: 180
                        example: 20
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:471464546082:function:hypermob-recommend/invocations
        passthroughBehavior: when_no_match

  /facedata:
    post:
      summary: 얼굴 랜드마크 추출 API
      description: |
        얼굴 이미지를 업로드하여 MediaPipe FaceMesh로 468개 얼굴 랜드마크 좌표를 추출합니다.
        - 얼굴 인증, 표정 분석 등에 활용 가능
        - 텍스트 파일 형식으로 S3에 저장
        - 특정 랜드마크만 선택적으로 추출 가능
      operationId: extractFaceLandmarks
      tags:
        - Face Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image_url
              properties:
                image_url:
                  type: string
                  format: uri
                  description: S3에 업로드된 얼굴 이미지 URL
                  example: "s3://hypermob-images/users/user123/face.jpg"
                user_id:
                  type: string
                  description: 사용자 고유 ID
                  example: "user123"
                refine:
                  type: boolean
                  description: MediaPipe FaceMesh refine_landmarks 옵션 (더 정확하지만 느림)
                  default: false
                  example: false
                indices:
                  type: string
                  description: |
                    추출할 랜드마크 인덱스 (4자리 형식: landmark_id(3자리) + coord_id(1자리))
                    - coord_id: 0=x, 1=y, 2=z
                    - 예: "1230,0561,0072" (landmark 123의 x좌표, landmark 56의 y좌표, landmark 7의 z좌표)
                    - 비어있으면 모든 468개 랜드마크의 x,y,z 좌표 추출 (총 1404개)
                  example: "1230,0561,0072"
            examples:
              full_extraction:
                summary: 전체 랜드마크 추출
                value:
                  image_url: "s3://hypermob-images/users/user123/face.jpg"
                  user_id: "user123"
                  refine: false
                  indices: ""
              selective_extraction:
                summary: 선택적 랜드마크 추출
                value:
                  image_url: "s3://hypermob-images/users/user123/face.jpg"
                  user_id: "user123"
                  refine: true
                  indices: "0010,0011,0012,0330,0331,0332"
      responses:
        '200':
          description: 추출 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      landmarks:
                        type: object
                        additionalProperties:
                          type: number
                          format: float
                        description: 랜드마크 좌표 맵 (키: "0010" 형식, 값: 0.0-1.0 정규화 좌표)
                        example:
                          "0010": 0.51234567
                          "0011": 0.62345678
                          "0012": 0.01234567
                      landmark_count:
                        type: integer
                        description: 추출된 랜드마크 좌표 개수
                        example: 1404
                      output_file_url:
                        type: string
                        format: uri
                        description: 랜드마크 데이터 텍스트 파일 S3 URL
                        example: "https://hypermob-results.s3.ap-northeast-2.amazonaws.com/facedata/user123/profile_xxx.txt"
                      user_id:
                        type: string
                        example: "user123"
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_image:
                  summary: 이미지를 찾을 수 없음
                  value:
                    status: "error"
                    error:
                      code: "IMAGE_NOT_FOUND"
                      message: "Unable to find image at specified URL"
                no_face:
                  summary: 얼굴 감지 실패
                  value:
                    status: "error"
                    error:
                      code: "FACE_DETECTION_FAILED"
                      message: "No face detected. Please use a clear frontal face image."
                invalid_indices:
                  summary: 잘못된 인덱스 형식
                  value:
                    status: "error"
                    error:
                      code: "INVALID_INDICES"
                      message: "Invalid index token: '12345' (must be 4 digits like 1230)"
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:471464546082:function:hypermob-facedata/invocations
        passthroughBehavior: when_no_match

  /health:
    get:
      summary: 헬스 체크
      description: API 서버 상태 확인
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: 서버 정상
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-26T12:00:00Z"
                  version:
                    type: string
                    example: "1.0.0"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                {
                  "status": "healthy",
                  "timestamp": "$context.requestTime",
                  "version": "1.0.0"
                }

components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        error:
          type: object
          properties:
            code:
              type: string
              example: "INTERNAL_ERROR"
            message:
              type: string
              example: "An unexpected error occurred"
            details:
              type: object
              additionalProperties: true
              nullable: true

  # securitySchemes는 필요시 추가 가능
  # securitySchemes:
  #   ApiKeyAuth:
  #     type: apiKey
  #     in: header
  #     name: X-API-Key
  #     description: API Key for authentication

tags:
  - name: Measurement
    description: 신체 측정 관련 API
  - name: Recommendation
    description: 차량 설정 추천 관련 API
  - name: Face Analysis
    description: 얼굴 랜드마크 추출 및 분석 API
  - name: System
    description: 시스템 관리 API
